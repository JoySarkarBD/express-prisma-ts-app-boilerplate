#!/usr/bin/env node
var _this2=this;function _newArrowCheck(e,n){if(e!==n)throw TypeError("Cannot instantiate an arrow function")}var _process$argv=process.argv,command=_process$argv[2],args=_process$argv.slice(3),fs=require("fs"),path=require("path"),_require=require("commander"),program=_require.program,GREEN="\x1b[32m",BLUE="\x1b[34m",RESET="\x1b[0m",specialCharRegex=/[0-9!@#$%^&*()_+{}\[\]:;"'<>,.?/~`|\-=\s]/g;function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function toCamelCase(e){var n=this;return e.replace(/[^a-zA-Z]+/g,"-").replace(/^-+|-+$/g,"").split("-").map((function(e,t){return _newArrowCheck(this,n),0===t?e.toLowerCase():e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}).bind(this)).join("")}"resource"===command?(program.version("1.0.0").description("Generate route, model, controller, and interface files for a new resource").argument("<name>","Resource name").action((function(e){var n=this;_newArrowCheck(this,_this2);var t=specialCharRegex.test(args[0])?toCamelCase(args[0]):args[0].toLowerCase(),r=capitalize(t),a=path.join(__dirname,"..","src","modules",args[0]),s=path.join(__dirname,"..","src","modules",args[0]),o=path.join(__dirname,"..","src","modules",args[0]),i=path.join(__dirname,"..","src","modules",args[0]),d=(function e(t){return _newArrowCheck(this,n),path.relative(path.join(__dirname,".."),t)}).bind(this);[a,s].forEach((function(e){_newArrowCheck(this,n),fs.existsSync(e)||fs.mkdirSync(e,{recursive:!0})}).bind(this));var c="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create"+r+",\n  createMany"+r+",\n  update"+r+",\n  updateMany"+r+",\n  delete"+r+",\n  deleteMany"+r+",\n  get"+r+"ById,\n  getMany"+r+"\n} from './"+args[0]+".controller';\n\n//Import validation from corresponding module\nimport { validate"+r+"Id } from './"+args[0]+".validation';\n\n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/"+args[0]+"/create-"+args[0]+"\n * @description Create a new "+args[0]+"\n * @access Public\n * @param {function} controller - ['create"+r+"']\n */\nrouter.post(\"/create-"+args[0]+'", create'+r+");\n\n/**\n * @route POST /api/v1/"+args[0]+"/create-"+args[0]+"/many\n * @description Create multiple "+args[0]+"\n * @access Public\n * @param {function} controller - ['createMany"+r+"']\n */\nrouter.post(\"/create-"+args[0]+'/many", createMany'+r+");\n\n/**\n * @route PUT /api/v1/"+args[0]+"/update-"+args[0]+"/many\n * @description Update multiple "+args[0]+" information\n * @access Public\n * @param {function} controller - ['updateMany"+r+"']\n */\nrouter.put(\"/update-"+args[0]+'/many", updateMany'+r+");\n\n/**\n * @route PUT /api/v1/"+args[0]+"/update-"+args[0]+"/:id\n * @description Update "+args[0]+" information\n * @param {string} id - The ID of the "+args[0]+" to update\n * @access Public\n * @param {function} controller - ['update"+r+"']\n * @param {function} validation - ['validate"+r+"Id']\n */\nrouter.put(\"/update-"+args[0]+'/:id", validate'+r+"Id, update"+r+");\n\n/**\n * @route DELETE /api/v1/"+args[0]+"/delete-"+args[0]+"/many\n * @description Delete multiple "+args[0]+"\n * @access Public\n * @param {function} controller - ['deleteMany"+r+"']\n */\nrouter.delete(\"/delete-"+args[0]+'/many", deleteMany'+r+");\n\n/**\n * @route DELETE /api/v1/"+args[0]+"/delete-"+args[0]+"/:id\n * @description Delete a "+args[0]+"\n * @param {string} id - The ID of the "+args[0]+" to delete\n * @access Public\n * @param {function} controller - ['delete"+r+"']\n * @param {function} validation - ['validate"+r+"Id']\n */\nrouter.delete(\"/delete-"+args[0]+'/:id", validate'+r+"Id, delete"+r+");\n\n/**\n * @route GET /api/v1/"+args[0]+"/get-"+args[0]+"/many\n * @description Get multiple "+args[0]+"\n * @access Public\n * @param {function} controller - ['getMany"+r+"']\n */\nrouter.get(\"/get-"+args[0]+'/many", getMany'+r+");\n\n/**\n * @route GET /api/v1/"+args[0]+"/get-"+args[0]+"/:id\n * @description Get a "+args[0]+" by ID\n * @param {string} id - The ID of the "+args[0]+" to retrieve\n * @access Public\n * @param {function} controller - ['get"+r+"ById']\n * @param {function} validation - ['validate"+r+"Id']\n */\nrouter.get(\"/get-"+args[0]+'/:id", validate'+r+"Id, get"+r+"ById);\n\n// Export the router\nmodule.exports = router;\n    ",u=path.join(a,args[0]+".route.ts");fs.writeFileSync(u,c.trim());var p="\nimport { Request, Response } from 'express';\nimport { "+t+"Services } from './"+args[0]+".service';\nimport ServerResponse from '../../helpers/responses/custom-response';\nimport catchAsync from '../../utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single "+r+".\n *\n * @param {Request} req - The request object containing "+args[0]+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create"+r+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new "+args[0]+" and get the result\n  const result = await "+t+"Services.create"+r+"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '"+r+" created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple "+args[0]+".\n *\n * @param {Request} req - The request object containing an array of "+args[0]+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany"+r+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple "+t+"s and get the result\n  const result = await "+t+"Services.createMany"+r+"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single "+args[0]+".\n *\n * @param {Request} req - The request object containing the ID of the "+args[0]+" to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update"+r+" = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the "+args[0]+" by ID and get the result\n  const result = await "+t+"Services.update"+r+"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '"+r+" updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple "+args[0]+".\n *\n * @param {Request} req - The request object containing an array of "+args[0]+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany"+r+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple "+args[0]+" and get the result\n  const result = await "+t+"Services.updateMany"+r+"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single "+args[0]+".\n *\n * @param {Request} req - The request object containing the ID of the "+args[0]+" to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete"+r+" = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the "+args[0]+" by ID\n  await "+t+"Services.delete"+r+"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '"+r+" deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple "+args[0]+".\n *\n * @param {Request} req - The request object containing an array of IDs of "+args[0]+" to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany"+r+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple "+args[0]+" and get the result\n  await "+t+"Services.deleteMany"+r+"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single "+args[0]+" by ID.\n *\n * @param {Request} req - The request object containing the ID of the "+args[0]+" to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get"+r+"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the "+args[0]+" by ID and get the result\n  const result = await "+t+"Services.get"+r+"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '"+r+" retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple "+args[0]+".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany"+r+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple "+args[0]+" based on query parameters and get the result\n  const result = await "+t+"Services.getMany"+r+"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    ",l=path.join(s,args[0]+".controller.ts");fs.writeFileSync(l,p.trim());var m="\nimport { NextFunction, Request, Response } from 'express';\nimport { isMongoId } from 'validator';\nimport { z } from 'zod';\nimport zodErrorHandler from '../../handlers/zod-error-handler';\n\n/**\n * Zod schema for validating "+t+" data.\n */\nconst zod"+r+'Schema = z.object({\n  id: z\n    .string({\n      required_error: "Id is required",\n      invalid_type_error: "Please provide a valid id",\n    })\n    .uuid({\n      message: "Please provide a valid UUID",\n    }),\n  ids: z\n    .array(z.string().uuid({\n      message: "Each ID must be a valid UUID",\n    }))\n    .min(1, {\n      message: "At least one ID must be provided",\n    }),\n}).strict();\n    \n/**\n * Middleware function to validate '+t+" ID using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate"+r+"Id = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request params\n  const { error, success } = zod"+r+"Schema.pick({ id: true }).safeParse({ id: req.params.id });\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n    ",h=path.join(o,args[0]+".validation.ts");fs.writeFileSync(h,m.trim());var y="\nimport { Prisma } from '@prisma/client';\n\n// Import the Prisma Client instance\nimport { prismaClient } from '../../index';\n\n/**\n * Service function to create a new "+t+".\n *\n * @param data - The data to create a new "+t+".\n * @returns {Promise<"+r+">} - The created "+t+".\n */\nconst create"+r+" = async (data: Prisma."+r+"CreateInput) => {\n  return await prismaClient."+t+".create({ data });\n};\n\n/**\n * Service function to create multiple "+t+".\n *\n * @param data - An array of data to create multiple "+t+".\n * @returns {Promise<"+r+"[]>} - The created "+t+".\n */\nconst createMany"+r+" = async (data: Prisma."+r+"CreateManyInput[]) => {\n  return await prismaClient."+t+".createMany({ data });\n};\n\n/**\n * Service function to update a single "+t+" by ID.\n *\n * @param id - The ID of the "+t+" to update.\n * @param data - The updated data for the "+t+".\n * @returns {Promise<"+r+">} - The updated "+t+".\n */\nconst update"+r+" = async (id: string, data: Prisma."+r+"UpdateInput) => {\n  return await prismaClient."+t+".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple "+t+".\n *\n * @param data - An array of data to update multiple "+t+".\n * @returns {Promise<"+r+"[]>} - The updated "+t+".\n */\nconst updateMany"+r+" = async (data: { id: string; updates: Prisma."+r+"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient."+t+".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single "+t+" by ID.\n *\n * @param id - The ID of the "+t+" to delete.\n * @returns {Promise<"+r+">} - The deleted "+t+".\n */\nconst delete"+r+" = async (id: string) => {\n  return await prismaClient."+t+".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple "+t+".\n *\n * @param ids - An array of IDs of "+t+" to delete.\n * @returns {Promise<"+r+"[]>} - The deleted "+t+".\n */\nconst deleteMany"+r+" = async (ids: string[]) => {\n  return await prismaClient."+t+".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single "+t+" by ID.\n *\n * @param id - The ID of the "+t+" to retrieve.\n * @returns {Promise<"+r+">} - The retrieved "+t+".\n */\nconst get"+r+"ById = async (id: string) => {\n  return await prismaClient."+t+".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple "+t+" based on query parameters.\n *\n * @param query - The query parameters for filtering "+t+".\n * @returns {Promise<"+r+"[]>} - The retrieved "+t+".\n */\nconst getMany"+r+" = async (query: Prisma."+r+"WhereInput) => {\n  return await prismaClient."+t+".findMany({\n    where: query,\n  });\n};\n\nexport const "+t+"Services = {\n  create"+r+",\n  createMany"+r+",\n  update"+r+",\n  updateMany"+r+",\n  delete"+r+",\n  deleteMany"+r+",\n  get"+r+"ById,\n  getMany"+r+",\n};\n    ",f=path.join(i,args[0]+".service.ts");fs.writeFileSync(f,y.trim()),console.log(GREEN+"CREATE "+RESET+d(l)+" "+BLUE+"("+Buffer.byteLength(p,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+d(u)+" "+BLUE+"("+Buffer.byteLength(c,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+d(f)+" "+BLUE+"("+Buffer.byteLength(y,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+d(h)+" "+BLUE+"("+Buffer.byteLength(m,"utf8")+" bytes)")}).bind(this)),program.parse(process.argv)):"nested-resource"===command?(program.version("1.0.0").description("Generate nested route, model, controller, and interface files for a new resource").argument("<path>","Nested path to resource (e.g., folder1/folder2/resourceName)").action((function(e){var n=this;_newArrowCheck(this,_this2);var t=args[0].split("/"),r=t.pop(),a=specialCharRegex.test(args[0])?toCamelCase(r):r.toLowerCase(),s=t,o=capitalize(a),i=path.join(__dirname,"..","src"),d=path.join.apply(path,[i,"modules"].concat(s,[r])),c=(function e(t){return _newArrowCheck(this,n),path.relative(path.join(__dirname,".."),t)}).bind(this);fs.existsSync(d)||fs.mkdirSync(d,{recursive:!0});var u="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create"+o+",\n  createMany"+o+",\n  update"+o+",\n  updateMany"+o+",\n  delete"+o+",\n  deleteMany"+o+",\n  get"+o+"ById,\n  getMany"+o+"\n} from './"+r+".controller';\n\n//Import validation from corresponding module\nimport { validate"+o+"Id } from './"+r+".validation';\n      \n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/"+s.join("/")+"/"+r+"/create-"+r+"\n * @description Create a new "+r+"\n * @access Public\n * @param {function} controller - ['create"+o+"']\n */\nrouter.post(\"/create-"+r+'", create'+o+");\n\n/**\n * @route POST /api/v1/"+s.join("/")+"/"+r+"/create-"+r+"/many\n * @description Create multiple "+r+"\n * @access Public\n * @param {function} controller - ['createMany"+o+"']\n */\nrouter.post(\"/create-"+r+'/many", createMany'+o+");\n\n/**\n * @route PUT /api/v1/"+s.join("/")+"/"+r+"/update-"+r+"/many\n * @description Update multiple "+r+" information\n * @access Public\n * @param {function} controller - ['updateMany"+o+"']\n */\nrouter.put(\"/update-"+r+'/many", updateMany'+o+");\n\n/**\n * @route PUT /api/v1/"+s.join("/")+"/"+r+"/update-"+r+"/:id\n * @description Update "+r+" information\n * @param {string} id - The ID of the "+r+" to update\n * @access Public\n * @param {function} controller - ['update"+o+"']\n * @param {function} validation - ['validate"+o+"Id']\n */\nrouter.put(\"/update-"+r+'/:id", validate'+o+"Id, update"+o+");\n\n/**\n * @route DELETE /api/v1/"+s.join("/")+"/"+r+"/delete-"+r+"/many\n * @description Delete multiple "+r+"\n * @access Public\n * @param {function} controller - ['deleteMany"+o+"']\n */\nrouter.delete(\"/delete-"+r+'/many", deleteMany'+o+");\n\n/**\n * @route DELETE /api/v1/"+s.join("/")+"/"+r+"/delete-"+r+"/:id\n * @description Delete a "+r+"\n * @param {string} id - The ID of the "+r+" to delete\n * @access Public\n * @param {function} controller - ['delete"+o+"']\n * @param {function} validation - ['validate"+o+"Id']\n */\nrouter.delete(\"/delete-"+r+'/:id", validate'+o+"Id, delete"+o+");\n\n/**\n * @route GET /api/v1/"+s.join("/")+"/"+r+"/get-"+r+"/many\n * @description Get multiple "+r+"\n * @access Public\n * @param {function} controller - ['getMany"+o+"']\n */\nrouter.get(\"/get-"+r+'/many", getMany'+o+");\n\n/**\n * @route GET /api/v1/"+s.join("/")+"/"+r+"/get-"+r+"/:id\n * @description Get a "+r+" by ID\n * @param {string} id - The ID of the "+r+" to retrieve\n * @access Public\n * @param {function} controller - ['get"+o+"ById']\n * @param {function} validation - ['validate"+o+"Id']\n */\nrouter.get(\"/get-"+r+'/:id", validate'+o+"Id, get"+o+"ById);\n\n// Export the router\nmodule.exports = router;\n    ",p=path.join(d,r+".route.ts");fs.writeFileSync(p,u.trim());var l="\nimport { Request, Response } from 'express';\nimport { "+a+"Services } from './"+r+".service';\nimport ServerResponse from '"+Array(s.length+2).fill("..").join("/")+"/helpers/responses/custom-response';\nimport catchAsync from '"+Array(s.length+2).fill("..").join("/")+"/utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single "+o+".\n *\n * @param {Request} req - The request object containing "+r+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create"+o+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new "+r+" and get the result\n  const result = await "+a+"Services.create"+o+"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '"+o+" created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple "+r+".\n *\n * @param {Request} req - The request object containing an array of "+r+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany"+o+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple "+r+" and get the result\n  const result = await "+a+"Services.createMany"+o+"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single "+o+".\n *\n * @param {Request} req - The request object containing the ID of the "+r+" to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update"+o+" = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the "+r+" by ID and get the result\n  const result = await "+a+"Services.update"+o+"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '"+o+" updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple "+r+".\n *\n * @param {Request} req - The request object containing an array of "+r+" data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany"+o+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple "+r+" and get the result\n  const result = await "+a+"Services.updateMany"+o+"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single "+o+".\n *\n * @param {Request} req - The request object containing the ID of the "+r+" to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete"+o+" = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the "+r+" by ID\n  await "+a+"Services.delete"+o+"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '"+o+" deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple "+r+".\n *\n * @param {Request} req - The request object containing an array of IDs of "+r+" to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany"+o+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple "+r+" and get the result\n  await "+a+"Services.deleteMany"+o+"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single "+o+" by ID.\n *\n * @param {Request} req - The request object containing the ID of the "+r+" to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get"+o+"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the "+r+" by ID and get the result\n  const result = await "+a+"Services.get"+o+"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '"+o+" retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple "+r+".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany"+o+" = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple "+r+" based on query parameters and get the result\n  const result = await "+a+"Services.getMany"+o+"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    ",m=path.join(d,r+".controller.ts");fs.writeFileSync(m,l.trim());var h="\nimport { NextFunction, Request, Response } from 'express';\nimport { isMongoId } from 'validator';\nimport { z } from 'zod';\nimport zodErrorHandler from '"+Array(s.length+2).fill("..").join("/")+"/handlers/zod-error-handler';\n\n/**\n * Zod schema for validating "+r+" data.\n */\nconst zod"+o+'Schema = z.object({\n  id: z\n    .string({\n      required_error: "Id is required",\n      invalid_type_error: "Please provide a valid id",\n    })\n    .uuid({\n      message: "Please provide a valid UUID",\n    }),\n  ids: z\n    .array(z.string().uuid({\n      message: "Each ID must be a valid UUID",\n    }))\n    .min(1, {\n      message: "At least one ID must be provided",\n    }),\n}).strict();\n\n/**\n * Middleware function to validate '+r+" ID using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate"+o+"Id = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request params\n  const { error, success } = zod"+o+"Schema.pick({ id: true }).safeParse({ id: req.params.id });\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n    ",y=path.join(d,r+".validation.ts");fs.writeFileSync(y,h.trim());var f="\nimport { Prisma } from '@prisma/client';\n\n// Import the prisma client\nimport { prismaClient } from '"+Array(s.length+2).fill("..").join("/")+"/index';\n\n/**\n * Service function to create a new "+r+".\n *\n * @param data - The data to create a new "+r+".\n * @returns {Promise<"+o+">} - The created "+r+".\n */\nconst create"+o+" = async (data: Prisma."+o+"CreateInput) => {\n  return await prismaClient."+r+".create({ data });\n};\n\n/**\n * Service function to create multiple "+r+".\n *\n * @param data - An array of data to create multiple "+r+".\n * @returns {Promise<"+o+"[]>} - The created "+r+".\n */\nconst createMany"+o+" = async (data: Prisma."+o+"CreateManyInput[]) => {\n  return await prismaClient."+r+".createMany({ data });\n};\n\n/**\n * Service function to update a single "+r+" by ID.\n *\n * @param id - The ID of the "+r+" to update.\n * @param data - The updated data for the "+r+".\n * @returns {Promise<"+o+">} - The updated "+r+".\n */\nconst update"+o+" = async (id: string, data: Prisma."+o+"UpdateInput) => {\n  return await prismaClient."+r+".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple "+r+".\n *\n * @param data - An array of data to update multiple "+r+".\n * @returns {Promise<"+o+"[]>} - The updated "+r+".\n */\nconst updateMany"+o+" = async (data: { id: string; updates: Prisma."+o+"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient."+r+".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single "+r+" by ID.\n *\n * @param id - The ID of the "+r+" to delete.\n * @returns {Promise<"+o+">} - The deleted "+r+".\n */\nconst delete"+o+" = async (id: string) => {\n  return await prismaClient."+r+".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple "+r+".\n *\n * @param ids - An array of IDs of "+r+" to delete.\n * @returns {Promise<"+o+"[]>} - The deleted "+r+".\n */\nconst deleteMany"+o+" = async (ids: string[]) => {\n  return await prismaClient."+r+".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single "+r+" by ID.\n *\n * @param id - The ID of the "+r+" to retrieve.\n * @returns {Promise<"+o+">} - The retrieved "+r+".\n */\nconst get"+o+"ById = async (id: string) => {\n  return await prismaClient."+r+".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple "+r+" based on query parameters.\n *\n * @param query - The query parameters for filtering "+r+".\n * @returns {Promise<"+o+"[]>} - The retrieved "+r+".\n */\nconst getMany"+o+" = async (query: Prisma."+o+"WhereInput) => {\n  return await prismaClient."+r+".findMany({\n    where: query,\n  });\n};\n\nexport const "+r+"Services = {\n  create"+o+",\n  createMany"+o+",\n  update"+o+",\n  updateMany"+o+",\n  delete"+o+",\n  deleteMany"+o+",\n  get"+o+"ById,\n  getMany"+o+",\n};\n    ",g=path.join(d,r+".service.ts");fs.writeFileSync(g,f.trim()),console.log(GREEN+"CREATE "+RESET+c(m)+" "+BLUE+"("+Buffer.byteLength(l,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+c(p)+" "+BLUE+"("+Buffer.byteLength(u,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+c(g)+" "+BLUE+"("+Buffer.byteLength(f,"utf8")+" bytes)"),console.log(GREEN+"CREATE "+RESET+c(y)+" "+BLUE+"("+Buffer.byteLength(h,"utf8")+" bytes)")}).bind(this)),program.parse(process.argv)):(console.error("Unknown command: "+command),process.exit(1));