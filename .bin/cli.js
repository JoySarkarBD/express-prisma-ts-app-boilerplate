#!/usr/bin/env node
function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _createForOfIteratorHelper(b,c){var d="undefined"!=typeof Symbol&&b[Symbol.iterator]||b["@@iterator"];if(!d){if(Array.isArray(b)||(d=_unsupportedIterableToArray(b))||c&&b&&"number"==typeof b.length){d&&(b=d);var e=0,f=function(){};return{s:f,n:function(){return e>=b.length?{done:!0}:{done:!1,value:b[e++]}},e:function(a){throw a},f:f}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var g,h=!0,i=!1;return{s:function(){d=d.call(b)},n:function(){var a=d.next();return h=a.done,a},e:function(a){i=!0,g=a},f:function(){try{h||null==d["return"]||d["return"]()}finally{if(i)throw g}}}}function _regeneratorRuntime(){"use strict";function b(a,b,c){return Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}),a[b]}function f(b,d,e,f){var g=d&&d.prototype instanceof k?d:k,h=Object.create(g.prototype),a=new B(f||[]);return E(h,"_invoke",{value:w(b,e,a)}),h}function j(a,b,c){try{return{type:"normal",arg:a.call(b,c)}}catch(a){return{type:"throw",arg:a}}}function k(){}function l(){}function m(){}function q(a){["next","throw","return"].forEach(function(c){b(a,c,function(a){return this._invoke(c,a)})})}function s(b,d){function c(e,f,g,i){var a=j(b[e],b,f);if("throw"!==a.type){var k=a.arg,l=k.value;return l&&"object"==_typeof(l)&&t.call(l,"__await")?d.resolve(l.__await).then(function(a){c("next",a,g,i)},function(a){c("throw",a,g,i)}):d.resolve(l).then(function(a){k.value=a,g(k)},function(a){return c("throw",a,g,i)})}i(a.arg)}var e;E(this,"_invoke",{value:function(a,b){function f(){return new d(function(d,e){c(a,b,d,e)})}return e=e?e.then(f,f):f()}})}function w(a,b,d){var e="suspendedStart";return function(f,g){if(e==="executing")throw Error("Generator is already running");if("completed"===e){if("throw"===f)throw g;return{value:D,done:!0}}for(d.method=f,d.arg=g;;){var h=d.delegate;if(h){var c=x(h,d);if(c){if(c===G)continue;return c}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if("suspendedStart"===e)throw e="completed",d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);e="executing";var i=j(a,b,d);if("normal"===i.type){if(e=d.done?"completed":"suspendedYield",i.arg===G)continue;return{value:i.arg,done:d.done}}"throw"===i.type&&(e="completed",d.method="throw",d.arg=i.arg)}}}function x(b,c){var d=c.method,e=b.iterator[d];if(e===D)return c.delegate=null,"throw"===d&&b.iterator["return"]&&(c.method="return",c.arg=D,x(b,c),"throw"===c.method)||"return"!==d&&(c.method="throw",c.arg=new TypeError("The iterator does not provide a '"+d+"' method")),G;var f=j(e,b.iterator,c.arg);if("throw"===f.type)return c.method="throw",c.arg=f.arg,c.delegate=null,G;var g=f.arg;return g?g.done?(c[b.resultName]=g.value,c.next=b.nextLoc,"return"!==c.method&&(c.method="next",c.arg=D),c.delegate=null,G):g:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,G)}function z(a){var b={tryLoc:a[0]};1 in a&&(b.catchLoc=a[1]),2 in a&&(b.finallyLoc=a[2],b.afterLoc=a[3]),this.tryEntries.push(b)}function A(a){var b=a.completion||{};b.type="normal",delete b.arg,a.completion=b}function B(a){this.tryEntries=[{tryLoc:"root"}],a.forEach(z,this),this.reset(!0)}function C(a){if(a||""===a){var b=a[F];if(b)return b.call(a);if("function"==typeof a.next)return a;if(!isNaN(a.length)){var c=-1,d=function b(){for(;++c<a.length;)if(t.call(a,c))return b.value=a[c],b.done=!1,b;return b.value=D,b.done=!0,b};return d.next=d}}throw new TypeError(_typeof(a)+" is not iterable")}_regeneratorRuntime=function(){return h};var D,h={},e=Object.prototype,t=e.hasOwnProperty,E=Object.defineProperty||function(a,b,c){a[b]=c.value},n="function"==typeof Symbol?Symbol:{},F=n.iterator||"@@iterator",a=n.asyncIterator||"@@asyncIterator",c=n.toStringTag||"@@toStringTag";try{b({},"")}catch(a){b=function(a,b,c){return a[b]=c}}h.wrap=f;var G={},i={};b(i,F,function(){return this});var o=Object.getPrototypeOf,d=o&&o(o(C([])));d&&d!==e&&t.call(d,F)&&(i=d);var r=m.prototype=k.prototype=Object.create(i);return l.prototype=m,E(r,"constructor",{value:m,configurable:!0}),E(m,"constructor",{value:l,configurable:!0}),l.displayName=b(m,c,"GeneratorFunction"),h.isGeneratorFunction=function(a){var b="function"==typeof a&&a.constructor;return!!b&&(b===l||"GeneratorFunction"===(b.displayName||b.name))},h.mark=function(a){return Object.setPrototypeOf?Object.setPrototypeOf(a,m):(a.__proto__=m,b(a,c,"GeneratorFunction")),a.prototype=Object.create(r),a},h.awrap=function(a){return{__await:a}},q(s.prototype),b(s.prototype,a,function(){return this}),h.AsyncIterator=s,h.async=function(b,c,d,e,g){void 0===g&&(g=Promise);var j=new s(f(b,c,d,e),g);return h.isGeneratorFunction(c)?j:j.next().then(function(a){return a.done?a.value:j.next()})},q(r),b(r,c,"Generator"),b(r,F,function(){return this}),b(r,"toString",function(){return"[object Generator]"}),h.keys=function(a){var b=Object(a),c=[];for(var d in b)c.push(d);return c.reverse(),function a(){for(;c.length;){var d=c.pop();if(d in b)return a.value=d,a.done=!1,a}return a.done=!0,a}},h.values=C,B.prototype={constructor:B,reset:function(a){if(this.prev=0,this.next=0,this.sent=this._sent=D,this.done=!1,this.delegate=null,this.method="next",this.arg=D,this.tryEntries.forEach(A),!a)for(var b in this)"t"===b.charAt(0)&&t.call(this,b)&&!isNaN(+b.slice(1))&&(this[b]=D)},stop:function(){this.done=!0;var a=this.tryEntries[0].completion;if("throw"===a.type)throw a.arg;return this.rval},dispatchException:function(b){function d(a,c){return h.type="throw",h.arg=b,e.next=a,c&&(e.method="next",e.arg=D),!!c}if(this.done)throw b;for(var e=this,f=this.tryEntries.length-1;0<=f;--f){var g=this.tryEntries[f],h=g.completion;if("root"===g.tryLoc)return d("end");if(g.tryLoc<=this.prev){var a=t.call(g,"catchLoc"),c=t.call(g,"finallyLoc");if(a&&c){if(this.prev<g.catchLoc)return d(g.catchLoc,!0);if(this.prev<g.finallyLoc)return d(g.finallyLoc)}else if(!a){if(!c)throw Error("try statement without catch or finally");if(this.prev<g.finallyLoc)return d(g.finallyLoc)}else if(this.prev<g.catchLoc)return d(g.catchLoc,!0)}}},abrupt:function(b,c){for(var d,e=this.tryEntries.length-1;0<=e;--e)if(d=this.tryEntries[e],d.tryLoc<=this.prev&&t.call(d,"finallyLoc")&&this.prev<d.finallyLoc){var f=d;break}f&&("break"===b||"continue"===b)&&f.tryLoc<=c&&c<=f.finallyLoc&&(f=null);var g=f?f.completion:{};return g.type=b,g.arg=c,f?(this.method="next",this.next=f.finallyLoc,G):this.complete(g)},complete:function(a,b){if("throw"===a.type)throw a.arg;return"break"===a.type||"continue"===a.type?this.next=a.arg:"return"===a.type?(this.rval=this.arg=a.arg,this.method="return",this.next="end"):"normal"===a.type&&b&&(this.next=b),G},finish:function(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.finallyLoc===a)return this.complete(b.completion,b.afterLoc),A(b),G},catch:function(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.tryLoc===a){var d=b.completion;if("throw"===d.type){var f=d.arg;A(b)}return f}throw Error("illegal catch attempt")},delegateYield:function(a,b,c){return this.delegate={iterator:C(a),resultName:b,nextLoc:c},"next"===this.method&&(this.arg=D),G}},h}function asyncGeneratorStep(b,d,f,e,g,h,a){try{var c=b[h](a),i=c.value}catch(a){return void f(a)}c.done?d(i):Promise.resolve(i).then(e,g)}function _asyncToGenerator(b){return function(){var c=this,d=arguments;return new Promise(function(e,f){function g(a){asyncGeneratorStep(i,e,f,g,h,"next",a)}function h(a){asyncGeneratorStep(i,e,f,g,h,"throw",a)}var i=b.apply(c,d);g(void 0)})}}function _toArray(a){return _arrayWithHoles(a)||_iterableToArray(a)||_unsupportedIterableToArray(a)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(b,c){if(b){if("string"==typeof b)return _arrayLikeToArray(b,c);var a={}.toString.call(b).slice(8,-1);return"Object"===a&&b.constructor&&(a=b.constructor.name),"Map"===a||"Set"===a?Array.from(b):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(b,c):void 0}}function _arrayLikeToArray(b,c){(null==c||c>b.length)&&(c=b.length);for(var d=0,f=Array(c);d<c;d++)f[d]=b[d];return f}function _iterableToArray(a){if("undefined"!=typeof Symbol&&null!=a[Symbol.iterator]||null!=a["@@iterator"])return Array.from(a)}function _arrayWithHoles(a){if(Array.isArray(a))return a}var _process$argv=_toArray(process.argv),command=_process$argv[2],args=_process$argv.slice(3),fs=require("fs"),path=require("path"),_require=require("commander"),program=_require.program,readline=require("readline"),RED="\x1B[31m",GREEN="\x1B[32m",BLUE="\x1B[34m",RESET="\x1B[0m",specialCharRegex=/[0-9!@#$%^&*()_+{}\[\]:;"'<>,.?/~`|\-=\s]/g;function capitalize(a){return a.charAt(0).toUpperCase()+a.slice(1)}function toCamelCase(a){var b=a.replace(/[^a-zA-Z]+/g,"-").replace(/^-+|-+$/g,"");return b.split("-").map(function(a,b){return 0===b?a.toLowerCase():a.charAt(0).toUpperCase()+a.slice(1).toLowerCase()}).join("")}"resource"===command?(program.version("1.0.0").description("Generate route, model, controller, and interface files for a new resource").argument("<name>","Resource name").action(function(){function a(a){return["".concat(a,".controller.ts"),"".concat(a,".route.ts"),"".concat(a,".service.ts"),"".concat(a,".validation.ts")]}function b(a,b){return new Promise(function(c){a.question(b,c)})}function c(){return d.apply(this,arguments)}function d(){return d=_asyncToGenerator(_regeneratorRuntime().mark(function c(d,f){var h,i,j,k,l,m,n;return _regeneratorRuntime().wrap(function(c){for(;;)switch(c.prev=c.next){case 0:h=fs.readdirSync(d),i=capitalize(f),j=readline.createInterface({input:process.stdin,output:process.stdout}),c.prev=3,k=_createForOfIteratorHelper(h),c.prev=5,m=_regeneratorRuntime().mark(function c(){var h,k,m,n,o,p,q,r,s,t,u;return _regeneratorRuntime().wrap(function(c){for(;;)switch(c.prev=c.next){case 0:if(h=l.value,k=path.join(d,h),h!==f){c.next=53;break}if(m=fs.statSync(k),!m.isDirectory()){c.next=53;break}if(n=fs.readdirSync(k),o=a(f),p=o.filter(function(a){return!n.includes(a)}),0!==p.length){c.next=12;break}console.log("".concat(RED).concat(i," module already exists.").concat(RESET)),c.next=52;break;case 12:if(!(0<p.length&&p.length<o.length)){c.next=50;break}return console.log("".concat(GREEN).concat(i," ").concat(RESET,"module exists, but some files are missing:")),p.forEach(function(a,b){return console.log("".concat(GREEN).concat(b+1,". ").concat(a).concat(RESET))}),c.next=17,b(j,"".concat(BLUE,"Do you want to create missing files one by one (Yes/Y) or all at once (Create/C)?").concat(RESET," Enter (Yes/Y) or (Create/C): "));case 17:if(q=c.sent,"yes"!==q.toLowerCase()&&"y"!==q.toLowerCase()){c.next=42;break}r=_createForOfIteratorHelper(p),c.prev=20,r.s();case 22:if((s=r.n()).done){c.next=32;break}return t=s.value,c.next=26,b(j,"".concat(BLUE,"Do you want to create ").concat(GREEN).concat(t,"?").concat(RESET," (yes/no) "));case 26:if(u=c.sent,"yes"!==u.toLowerCase()&&"y"!==u.toLowerCase()){c.next=30;break}return c.next=30,e(k,t,f);case 30:c.next=22;break;case 32:c.next=37;break;case 34:c.prev=34,c.t0=c["catch"](20),r.e(c.t0);case 37:return c.prev=37,r.f(),c.finish(37);case 40:c.next=48;break;case 42:if("create"!==q.toLowerCase()&&"c"!==q.toLowerCase()){c.next=47;break}return c.next=45,g(k,p,f);case 45:c.next=48;break;case 47:console.log("".concat(RED,"Invalid option. No files will be created.").concat(RESET));case 48:c.next=52;break;case 50:return c.next=52,g(k,p,f);case 52:return c.abrupt("return",{v:!0});case 53:case"end":return c.stop();}},c,null,[[20,34,37,40]])}),k.s();case 8:if((l=k.n()).done){c.next=15;break}return c.delegateYield(m(),"t0",10);case 10:if(n=c.t0,!n){c.next=13;break}return c.abrupt("return",n.v);case 13:c.next=8;break;case 15:c.next=20;break;case 17:c.prev=17,c.t1=c["catch"](5),k.e(c.t1);case 20:return c.prev=20,k.f(),c.finish(20);case 23:return c.abrupt("return",!1);case 24:return c.prev=24,j.close(),c.finish(24);case 27:case"end":return c.stop();}},c,null,[[3,,24,27],[5,17,20,23]])})),d.apply(this,arguments)}function e(){return f.apply(this,arguments)}function f(){return f=_asyncToGenerator(_regeneratorRuntime().mark(function a(b,c,d){var e,f;return _regeneratorRuntime().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:e=path.join(b,c),a.t0=c,a.next=a.t0==="".concat(d,".route.ts")?4:a.t0==="".concat(d,".controller.ts")?6:a.t0==="".concat(d,".validation.ts")?8:a.t0==="".concat(d,".service.ts")?10:12;break;case 4:return f=l,a.abrupt("break",12);case 6:return f=o,a.abrupt("break",12);case 8:return f=r,a.abrupt("break",12);case 10:return f=u,a.abrupt("break",12);case 12:fs.writeFileSync(e,f.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(w(e)," ").concat(BLUE,"(").concat(Buffer.byteLength(f,"utf8")," bytes)").concat(RESET));case 14:case"end":return a.stop();}},a)})),f.apply(this,arguments)}function g(){return h.apply(this,arguments)}function h(){return h=_asyncToGenerator(_regeneratorRuntime().mark(function a(b,c,d){var f,g,h;return _regeneratorRuntime().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:f=_createForOfIteratorHelper(c),a.prev=1,f.s();case 3:if((g=f.n()).done){a.next=9;break}return h=g.value,a.next=7,e(b,h,d);case 7:a.next=3;break;case 9:a.next=14;break;case 11:a.prev=11,a.t0=a["catch"](1),f.e(a.t0);case 14:return a.prev=14,f.f(),a.finish(14);case 17:case"end":return a.stop();}},a,null,[[1,11,14,17]])})),h.apply(this,arguments)}var i=specialCharRegex.test(args[0])?toCamelCase(args[0]):args[0].toLowerCase(),j=capitalize(i),k=path.join(__dirname,"..","src","modules",args[0]),l="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(j,",\n  createMany").concat(j,",\n  update").concat(j,",\n  updateMany").concat(j,",\n  delete").concat(j,",\n  deleteMany").concat(j,",\n  get").concat(j,"ById,\n  getMany").concat(j,"\n} from './").concat(args[0],".controller';\n\n//Import validation from corresponding module\nimport { validateCreate").concat(j,", validateCreateMany").concat(j,", validateUpdate").concat(j,", validateUpdateMany").concat(j,"} from './").concat(args[0],".validation';\nimport { validateId, validateIds } from '../../handlers/common-zod-validator';\n\n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"\n * @description Create a new ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['create").concat(j,"']\n * @param {function} validation - ['validateCreate").concat(j,"']\n */\nrouter.post(\"/create-").concat(args[0],"\", validateCreate").concat(j,", create").concat(j,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"/many\n * @description Create multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['createMany").concat(j,"']\n * @param {function} validation - ['validateCreateMany").concat(j,"']\n */\nrouter.post(\"/create-").concat(args[0],"/many\", validateCreateMany").concat(j,", createMany").concat(j,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/many\n * @description Update multiple ").concat(args[0]," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(j,"']\n * @param {function} validation - ['validateIds', 'validateUpdateMany").concat(j,"']\n */\nrouter.put(\"/update-").concat(args[0],"/many\", validateIds, validateUpdateMany").concat(j,", updateMany").concat(j,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/:id\n * @description Update ").concat(args[0]," information\n * @param {string} id - The ID of the ").concat(args[0]," to update\n * @access Public\n * @param {function} controller - ['update").concat(j,"']\n * @param {function} validation - ['validateId', 'validateUpdate").concat(j,"']\n */\nrouter.put(\"/update-").concat(args[0],"/:id\", validateId, validateUpdate").concat(j,", update").concat(j,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/many\n * @description Delete multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(j,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(args[0],"/many\", validateIds, deleteMany").concat(j,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/:id\n * @description Delete a ").concat(args[0],"\n * @param {string} id - The ID of the ").concat(args[0]," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(j,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(args[0],"/:id\", validateId, delete").concat(j,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/get-").concat(args[0],"/many\n * @description Get multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['getMany").concat(j,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.post(\"/get-").concat(args[0],"/many\", validateIds, getMany").concat(j,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/:id\n * @description Get a ").concat(args[0]," by ID\n * @param {string} id - The ID of the ").concat(args[0]," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(j,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(args[0],"/:id\", validateId, get").concat(j,"ById);\n\n// Export the router\nmodule.exports = router;\n    "),m=path.join(k,"".concat(args[0],".route.ts")),n=path.join(__dirname,"..","src","modules",args[0]),o="\nimport { Request, Response } from 'express';\nimport { ".concat(i,"Services } from './").concat(args[0],".service';\nimport ServerResponse from '../../helpers/responses/custom-response';\nimport catchAsync from '../../utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(j,".\n *\n * @param {Request} req - The request object containing ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(args[0]," and get the result\n  const result = await ").concat(i,"Services.create").concat(j,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(j," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(i,"s and get the result\n  const result = await ").concat(i,"Services.createMany").concat(j,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(i,"Services.update").concat(j,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(j," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(args[0]," and get the result\n  const result = await ").concat(i,"Services.updateMany").concat(j,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(args[0]," by ID\n  await ").concat(i,"Services.delete").concat(j,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(j," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(args[0]," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(args[0]," and get the result\n  await ").concat(i,"Services.deleteMany").concat(j,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(args[0]," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(j,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(i,"Services.get").concat(j,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(j," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(j," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(args[0]," based on query parameters and get the result\n  const result = await ").concat(i,"Services.getMany").concat(j,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    "),p=path.join(n,"".concat(args[0],".controller.ts")),q=path.join(__dirname,"..","src","modules",args[0]),r="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '../../handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ".concat(i," data during creation.\n */\nconst zodCreate").concat(j,"Schema = z.object({\n  // Define fields required for creating a new ").concat(i,".\n  // Example:\n  // filedName: z.string({ required_error: 'Please provide a filedName.' }).min(1, \"Can't be empty.\"),\n}).strict();\n\n/**\n * Middleware function to validate ").concat(i," creation data using Zod schema.\n * @param {Request} req - The request object.\n * @param {Response} res - The response object.\n * @param {NextFunction} next - The next middleware function.\n * @returns {void}\n */\nexport const validateCreate").concat(j," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate the request body for creating a new ").concat(i,"\n  const parseResult = zodCreate").concat(j,"Schema.safeParse(req.body);\n\n  // If validation fails, send an error response using the Zod error handler\n  if (!parseResult.success) {\n    return zodErrorHandler(req, res, parseResult.error);\n  }\n\n  // If validation passes, proceed to the next middleware function\n  return next();\n};\n\n/**\n * Zod schema for validating multiple ").concat(i," data during creation.\n */\nconst zodCreateMany").concat(j,"Schema = z.array(zodCreate").concat(j,"Schema);\n\n/**\n * Middleware function to validate multiple ").concat(i," creation data using Zod schema.\n * @param {Request} req - The request object.\n * @param {Response} res - The response object.\n * @param {NextFunction} next - The next middleware function.\n * @returns {void}\n */\nexport const validateCreateMany").concat(j," = (req: Request, res: Response, next: NextFunction) => {\n  const parseResult = zodCreateMany").concat(j,"Schema.safeParse(req.body);\n  if (!parseResult.success) {\n    return zodErrorHandler(req, res, parseResult.error);\n  }\n  return next();\n};\n\n/**\n * Zod schema for validating ").concat(i," data during updates.\n */\nconst zodUpdate").concat(j,"Schema = z.object({\n  // Define fields required for updating an existing ").concat(i,".\n  // Example:\n  // fieldName: z.string({ required_error: 'Please provide a filedName.' }).optional(), // Fields can be optional during updates\n}).strict();\n\n/**\n * Middleware function to validate ").concat(i," update data using Zod schema.\n * @param {Request} req - The request object.\n * @param {Response} res - The response object.\n * @param {NextFunction} next - The next middleware function.\n * @returns {void}\n */\nexport const validateUpdate").concat(j," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate the request body for updating an existing ").concat(i,"\n  const parseResult = zodUpdate").concat(j,"Schema.safeParse(req.body);\n\n  // If validation fails, send an error response using the Zod error handler\n  if (!parseResult.success) {\n    return zodErrorHandler(req, res, parseResult.error);\n  }\n\n  // If validation passes, proceed to the next middleware function\n  return next();\n};\n\n/**\n * Zod schema for validating multiple ").concat(i," data during updates.\n */\nconst zodUpdateMany").concat(j,"Schema = z.array(zodUpdate").concat(j,"Schema);\n\n\n/**\n * Middleware function to validate multiple ").concat(i," update data using Zod schema.\n * @param {Request} req - The request object.\n * @param {Response} res - The response object.\n * @param {NextFunction} next - The next middleware function.\n * @returns {void}\n */\nexport const validateUpdateMany").concat(j," = (req: Request, res: Response, next: NextFunction) => {\n  const parseResult = zodUpdateMany").concat(j,"Schema.safeParse(req.body);\n  if (!parseResult.success) {\n    return zodErrorHandler(req, res, parseResult.error);\n  }\n  return next();\n};\n    "),s=path.join(q,"".concat(args[0],".validation.ts")),t=path.join(__dirname,"..","src","modules",args[0]),u="\nimport { Prisma } from '@prisma/client';\n\n// Import the Prisma Client instance\nimport { prismaClient } from '../../index';\n\n/**\n * Service function to create a new ".concat(i,".\n *\n * @param data - The data to create a new ").concat(i,".\n * @returns {Promise<").concat(j,">} - The created ").concat(i,".\n */\nconst create").concat(j," = async (data: Prisma.").concat(j,"CreateInput) => {\n  return await prismaClient.").concat(i,".create({ data });\n};\n\n/**\n * Service function to create multiple ").concat(i,".\n *\n * @param data - An array of data to create multiple ").concat(i,".\n * @returns {Promise<").concat(j,"[]>} - The created ").concat(i,".\n */\nconst createMany").concat(j," = async (data: Prisma.").concat(j,"CreateManyInput[]) => {\n  return await prismaClient.").concat(i,".createMany({ data });\n};\n\n/**\n * Service function to update a single ").concat(i," by ID.\n *\n * @param id - The ID of the ").concat(i," to update.\n * @param data - The updated data for the ").concat(i,".\n * @returns {Promise<").concat(j,">} - The updated ").concat(i,".\n */\nconst update").concat(j," = async (id: string, data: Prisma.").concat(j,"UpdateInput) => {\n  return await prismaClient.").concat(i,".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple ").concat(i,".\n *\n * @param data - An array of data to update multiple ").concat(i,".\n * @returns {Promise<").concat(j,"[]>} - The updated ").concat(i,".\n */\nconst updateMany").concat(j," = async (data: { id: string; updates: Prisma.").concat(j,"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient.").concat(i,".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(i," by ID.\n *\n * @param id - The ID of the ").concat(i," to delete.\n * @returns {Promise<").concat(j,">} - The deleted ").concat(i,".\n */\nconst delete").concat(j," = async (id: string) => {\n  return await prismaClient.").concat(i,".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple ").concat(i,".\n *\n * @param ids - An array of IDs of ").concat(i," to delete.\n * @returns {Promise<").concat(j,"[]>} - The deleted ").concat(i,".\n */\nconst deleteMany").concat(j," = async (ids: string[]) => {\n  return await prismaClient.").concat(i,".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single ").concat(i," by ID.\n *\n * @param id - The ID of the ").concat(i," to retrieve.\n * @returns {Promise<").concat(j,">} - The retrieved ").concat(i,".\n */\nconst get").concat(j,"ById = async (id: string) => {\n  return await prismaClient.").concat(i,".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple ").concat(i," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(i,".\n * @returns {Promise<").concat(j,"[]>} - The retrieved ").concat(i,".\n */\nconst getMany").concat(j," = async (query: Prisma.").concat(j,"WhereInput) => {\n  return await prismaClient.").concat(i,".findMany({\n    where: query,\n  });\n};\n\nexport const ").concat(i,"Services = {\n  create").concat(j,",\n  createMany").concat(j,",\n  update").concat(j,",\n  updateMany").concat(j,",\n  delete").concat(j,",\n  deleteMany").concat(j,",\n  get").concat(j,"ById,\n  getMany").concat(j,",\n};\n    "),v=path.join(t,"".concat(args[0],".service.ts")),w=function(a){return path.relative(path.join(__dirname,".."),a)};[k,n].forEach(function(a){fs.existsSync(a)||fs.mkdirSync(a,{recursive:!0})}),_asyncToGenerator(_regeneratorRuntime().mark(function a(){var b,d,e;return _regeneratorRuntime().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(b=args[0],d=path.join(process.cwd(),"src","modules"),b){a.next=5;break}return console.log("".concat(RED,"Please provide a module name.").concat(RESET)),a.abrupt("return");case 5:return a.next=7,c(d,b);case 7:e=a.sent,e||console.log("".concat(RED,"Module ").concat(b," not found.").concat(RESET));case 9:case"end":return a.stop();}},a)}))()}),program.parse(process.argv)):(console.error("Unknown command: ".concat(command)),process.exit(1));