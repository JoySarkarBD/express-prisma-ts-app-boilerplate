#!/usr/bin/env node
function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _createForOfIteratorHelper(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function e(){};return{s:a,n:function t(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function e(t){throw t},f:a}}throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,c=!0,s=!1;return{s:function t(){n=n.call(e)},n:function e(){var t=n.next();return c=t.done,t},e:function e(t){s=!0,o=t},f:function e(){try{c||null==n.return||n.return()}finally{if(s)throw o}}}}function _regeneratorRuntime(){"use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime=function e(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},c=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",i=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(l){u=function e(t,n,r){return t[n]=r}}function d(t,n,r,o){var c,s,i,u,l=Object.create((n&&n.prototype instanceof v?n:v).prototype);return a(l,"_invoke",{value:(c=t,s=r,i=new S(o||[]),u=f,function(t,n){if(u===h)throw Error("Generator is already running");if(u===m){if("throw"===t)throw n;return{value:e,done:!0}}for(i.method=t,i.arg=n;;){var r=i.delegate;if(r){var a=T(r,i);if(a){if(a===y)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(u===f)throw u=m,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);u=h;var o=p(c,s,i);if("normal"===o.type){if(u=i.done?m:"suspendedYield",o.arg===y)continue;return{value:o.arg,done:i.done}}"throw"===o.type&&(u=m,i.method="throw",i.arg=o.arg)}})}),l}function p(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(r){return{type:"throw",arg:r}}}t.wrap=d;var f="suspendedStart",h="executing",m="completed",y={};function v(){}function g(){}function $(){}var b={};u(b,c,function(){return this});var w=Object.getPrototypeOf,R=w&&w(w(C([])));R&&R!==n&&r.call(R,c)&&(b=R);var x=$.prototype=v.prototype=Object.create(b);function _(e){["next","throw","return"].forEach(function(t){u(e,t,function(e){return this._invoke(t,e)})})}function E(e,t){var n;a(this,"_invoke",{value:function a(o,c){function s(){return new t(function(n,a){!function n(a,o,c,s){var i=p(e[a],e,o);if("throw"!==i.type){var u=i.arg,l=u.value;return l&&"object"==_typeof(l)&&r.call(l,"__await")?t.resolve(l.__await).then(function(e){n("next",e,c,s)},function(e){n("throw",e,c,s)}):t.resolve(l).then(function(e){u.value=e,c(u)},function(e){return n("throw",e,c,s)})}s(i.arg)}(o,c,n,a)})}return n=n?n.then(s,s):s()}})}function T(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,T(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=TypeError("The iterator does not provide a '"+r+"' method")),y;var o=p(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,y;var c=o.arg;return c?c.done?(n[t.resultName]=c.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):c:(n.method="throw",n.arg=TypeError("iterator result is not an object"),n.delegate=null,y)}function I(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function q(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(I,this),this.reset(!0)}function C(t){if(t||""===t){var n=t[c];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw TypeError(_typeof(t)+" is not iterable")}return g.prototype=$,a(x,"constructor",{value:$,configurable:!0}),a($,"constructor",{value:g,configurable:!0}),g.displayName=u($,i,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,$):(e.__proto__=$,u(e,i,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},_(E.prototype),u(E.prototype,s,function(){return this}),t.AsyncIterator=E,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var c=new E(d(e,n,r,a),o);return t.isGeneratorFunction(n)?c:c.next().then(function(e){return e.done?e.value:c.next()})},_(x),u(x,i,"Generator"),u(x,c,function(){return this}),u(x,"toString",function(){return"[object Generator]"}),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=C,S.prototype={constructor:S,reset:function t(n){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(q),!n)for(var a in this)"t"===a.charAt(0)&&r.call(this,a)&&!isNaN(+a.slice(1))&&(this[a]=e)},stop:function e(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function t(n){if(this.done)throw n;var a=this;function o(t,r){return i.type="throw",i.arg=n,a.next=t,r&&(a.method="next",a.arg=e),!!r}for(var c=this.tryEntries.length-1;c>=0;--c){var s=this.tryEntries[c],i=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var u=r.call(s,"catchLoc"),l=r.call(s,"finallyLoc");if(u&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(u){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function e(t,n){for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var c=o;break}}c&&("break"===t||"continue"===t)&&c.tryLoc<=n&&n<=c.finallyLoc&&(c=null);var s=c?c.completion:{};return s.type=t,s.arg=n,c?(this.method="next",this.next=c.finallyLoc,y):this.complete(s)},complete:function e(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),y},finish:function e(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),q(r),y}},catch:function e(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var a=r.completion;if("throw"===a.type){var o=a.arg;q(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function t(n,r,a){return this.delegate={iterator:C(n),resultName:r,nextLoc:a},"next"===this.method&&(this.arg=e),y}},t}function asyncGeneratorStep(e,t,n,r,a,o,c){try{var s=e[o](c),i=s.value}catch(u){return void n(u)}s.done?t(i):Promise.resolve(i).then(r,a)}function _asyncToGenerator(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function c(e){asyncGeneratorStep(o,r,a,c,s,"next",e)}function s(e){asyncGeneratorStep(o,r,a,c,s,"throw",e)}c(void 0)})}}function _toArray(e){return _arrayWithHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableRest()}function _nonIterableRest(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=({}).toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithHoles(e){if(Array.isArray(e))return e}var _process$argv=_toArray(process.argv),command=_process$argv[2],args=_process$argv.slice(3),fs=require("fs"),path=require("path"),_require=require("commander"),program=_require.program,readline=require("readline"),RED="\x1b[31m",GREEN="\x1b[32m",BLUE="\x1b[34m",RESET="\x1b[0m",specialCharRegex=/[0-9!@#$%^&*()_+{}\[\]:;"'<>,.?/~`|\-=\s]/g;function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function toCamelCase(e){return e.replace(/[^a-zA-Z]+/g,"-").replace(/^-+|-+$/g,"").split("-").map(function(e,t){return 0===t?e.toLowerCase():e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}).join("")}"resource"===command?(program.version("1.0.0").description("Generate route, model, controller, and interface files for a new resource").argument("<name>","Resource name").action(function(e){var t=specialCharRegex.test(args[0])?toCamelCase(args[0]):args[0].toLowerCase(),n=capitalize(t),r=path.join(__dirname,"..","src","modules",args[0]),a="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(n,",\n  createMany").concat(n,",\n  update").concat(n,",\n  updateMany").concat(n,",\n  delete").concat(n,",\n  deleteMany").concat(n,",\n  get").concat(n,"ById,\n  getMany").concat(n,"\n} from './").concat(args[0],".controller';\n\n//Import validation from corresponding module\nimport { validate").concat(n," } from './").concat(args[0],".validation';\nimport { validateId, validateIds } from '../../handlers/common-zod-validator';\n\n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"\n * @description Create a new ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['create").concat(n,"']\n * @param {function} validation - ['validate").concat(n,"']\n */\nrouter.post(\"/create-").concat(args[0],'", validate').concat(n,", create").concat(n,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"/many\n * @description Create multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['createMany").concat(n,"']\n */\nrouter.post(\"/create-").concat(args[0],'/many", createMany').concat(n,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/many\n * @description Update multiple ").concat(args[0]," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(n,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.put(\"/update-").concat(args[0],'/many", validateIds, updateMany').concat(n,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/:id\n * @description Update ").concat(args[0]," information\n * @param {string} id - The ID of the ").concat(args[0]," to update\n * @access Public\n * @param {function} controller - ['update").concat(n,"']\n * @param {function} validation - ['validateId', 'validate").concat(n,"']\n */\nrouter.put(\"/update-").concat(args[0],'/:id", validateId, validate').concat(n,", update").concat(n,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/many\n * @description Delete multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(n,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(args[0],'/many", validateIds, deleteMany').concat(n,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/:id\n * @description Delete a ").concat(args[0],"\n * @param {string} id - The ID of the ").concat(args[0]," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(n,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(args[0],'/:id", validateId, delete').concat(n,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/get-").concat(args[0],"/many\n * @description Get multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['getMany").concat(n,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.post(\"/get-").concat(args[0],'/many", validateIds, getMany').concat(n,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/:id\n * @description Get a ").concat(args[0]," by ID\n * @param {string} id - The ID of the ").concat(args[0]," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(n,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(args[0],'/:id", validateId, get').concat(n,"ById);\n\n// Export the router\nmodule.exports = router;\n    ");path.join(r,"".concat(args[0],".route.ts"));var o=path.join(__dirname,"..","src","modules",args[0]),c="\nimport { Request, Response } from 'express';\nimport { ".concat(t,"Services } from './").concat(args[0],".service';\nimport ServerResponse from '../../helpers/responses/custom-response';\nimport catchAsync from '../../utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(n,".\n *\n * @param {Request} req - The request object containing ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(args[0]," and get the result\n  const result = await ").concat(t,"Services.create").concat(n,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(n," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(t,"s and get the result\n  const result = await ").concat(t,"Services.createMany").concat(n,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(t,"Services.update").concat(n,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(n," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(args[0]," and get the result\n  const result = await ").concat(t,"Services.updateMany").concat(n,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(args[0]," by ID\n  await ").concat(t,"Services.delete").concat(n,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(n," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(args[0]," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(args[0]," and get the result\n  await ").concat(t,"Services.deleteMany").concat(n,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(args[0]," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(n,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(t,"Services.get").concat(n,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(n," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(n," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(args[0]," based on query parameters and get the result\n  const result = await ").concat(t,"Services.getMany").concat(n,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    ");path.join(o,"".concat(args[0],".controller.ts"));var s=path.join(__dirname,"..","src","modules",args[0]),i="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '../../handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ".concat(t," data.\n */\nconst zod").concat(n,"Schema = z.object({\n // Define schema fields here\n}).strict();\n\n/**\n * Middleware function to validate ").concat(t," using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate").concat(n," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request body\n  const { error, success } = zod").concat(n,"Schema.safeParse(req.body);\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n    ");path.join(s,"".concat(args[0],".validation.ts"));var u=path.join(__dirname,"..","src","modules",args[0]),l="\nimport { Prisma } from '@prisma/client';\n\n// Import the Prisma Client instance\nimport { prismaClient } from '../../index';\n\n/**\n * Service function to create a new ".concat(t,".\n *\n * @param data - The data to create a new ").concat(t,".\n * @returns {Promise<").concat(n,">} - The created ").concat(t,".\n */\nconst create").concat(n," = async (data: Prisma.").concat(n,"CreateInput) => {\n  return await prismaClient.").concat(t,".create({ data });\n};\n\n/**\n * Service function to create multiple ").concat(t,".\n *\n * @param data - An array of data to create multiple ").concat(t,".\n * @returns {Promise<").concat(n,"[]>} - The created ").concat(t,".\n */\nconst createMany").concat(n," = async (data: Prisma.").concat(n,"CreateManyInput[]) => {\n  return await prismaClient.").concat(t,".createMany({ data });\n};\n\n/**\n * Service function to update a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to update.\n * @param data - The updated data for the ").concat(t,".\n * @returns {Promise<").concat(n,">} - The updated ").concat(t,".\n */\nconst update").concat(n," = async (id: string, data: Prisma.").concat(n,"UpdateInput) => {\n  return await prismaClient.").concat(t,".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple ").concat(t,".\n *\n * @param data - An array of data to update multiple ").concat(t,".\n * @returns {Promise<").concat(n,"[]>} - The updated ").concat(t,".\n */\nconst updateMany").concat(n," = async (data: { id: string; updates: Prisma.").concat(n,"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient.").concat(t,".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to delete.\n * @returns {Promise<").concat(n,">} - The deleted ").concat(t,".\n */\nconst delete").concat(n," = async (id: string) => {\n  return await prismaClient.").concat(t,".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple ").concat(t,".\n *\n * @param ids - An array of IDs of ").concat(t," to delete.\n * @returns {Promise<").concat(n,"[]>} - The deleted ").concat(t,".\n */\nconst deleteMany").concat(n," = async (ids: string[]) => {\n  return await prismaClient.").concat(t,".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to retrieve.\n * @returns {Promise<").concat(n,">} - The retrieved ").concat(t,".\n */\nconst get").concat(n,"ById = async (id: string) => {\n  return await prismaClient.").concat(t,".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple ").concat(t," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(t,".\n * @returns {Promise<").concat(n,"[]>} - The retrieved ").concat(t,".\n */\nconst getMany").concat(n," = async (query: Prisma.").concat(n,"WhereInput) => {\n  return await prismaClient.").concat(t,".findMany({\n    where: query,\n  });\n};\n\nexport const ").concat(t,"Services = {\n  create").concat(n,",\n  createMany").concat(n,",\n  update").concat(n,",\n  updateMany").concat(n,",\n  delete").concat(n,",\n  deleteMany").concat(n,",\n  get").concat(n,"ById,\n  getMany").concat(n,",\n};\n    ");function d(e){return["".concat(e,".controller.ts"),"".concat(e,".route.ts"),"".concat(e,".service.ts"),"".concat(e,".validation.ts")]}function p(e,t){return new Promise(function(n){e.question(t,n)})}function f(e,t){return h.apply(this,arguments)}function h(){return(h=_asyncToGenerator(_regeneratorRuntime().mark(function e(t,n){var r,a,o,c,s,i,u;return _regeneratorRuntime().wrap(function e(l){for(;;)switch(l.prev=l.next){case 0:r=fs.readdirSync(t),a=capitalize(n),o=readline.createInterface({input:process.stdin,output:process.stdout}),l.prev=3,c=_createForOfIteratorHelper(r),l.prev=5,i=_regeneratorRuntime().mark(function e(){var r,c,i,u,l,f,h,y,g,$,b;return _regeneratorRuntime().wrap(function e(w){for(;;)switch(w.prev=w.next){case 0:if(r=s.value,c=path.join(t,r),r!==n||!(i=fs.statSync(c)).isDirectory()){w.next=53;break}if(u=fs.readdirSync(c),0!==(f=(l=d(n)).filter(function(e){return!u.includes(e)})).length){w.next=12;break}console.log("".concat(RED).concat(a," module already exists.").concat(RESET)),w.next=52;break;case 12:if(!(f.length>0&&f.length<l.length)){w.next=50;break}return console.log("".concat(GREEN).concat(a," ").concat(RESET,"module exists, but some files are missing:")),f.forEach(function(e,t){return console.log("".concat(GREEN).concat(t+1,". ").concat(e).concat(RESET))}),w.next=17,p(o,"".concat(BLUE,"Do you want to create missing files one by one (Yes/Y) or all at once (Create/C)?").concat(RESET," Enter (Yes/Y) or (Create/C): "));case 17:if(!("yes"===(h=w.sent).toLowerCase()||"y"===h.toLowerCase())){w.next=42;break}y=_createForOfIteratorHelper(f),w.prev=20,y.s();case 22:if((g=y.n()).done){w.next=32;break}return $=g.value,w.next=26,p(o,"".concat(BLUE,"Do you want to create ").concat(GREEN).concat($,"?").concat(RESET," (yes/no) "));case 26:if(!("yes"===(b=w.sent).toLowerCase()||"y"===b.toLowerCase())){w.next=30;break}return w.next=30,m(c,$,n);case 30:w.next=22;break;case 32:w.next=37;break;case 34:w.prev=34,w.t0=w.catch(20),y.e(w.t0);case 37:return w.prev=37,y.f(),w.finish(37);case 40:case 45:w.next=48;break;case 42:if(!("create"===h.toLowerCase()||"c"===h.toLowerCase())){w.next=47;break}return w.next=45,v(c,f,n);case 47:console.log("".concat(RED,"Invalid option. No files will be created.").concat(RESET));case 48:w.next=52;break;case 50:return w.next=52,v(c,f,n);case 52:return w.abrupt("return",{v:!0});case 53:case"end":return w.stop()}},e,null,[[20,34,37,40]])}),c.s();case 8:if((s=c.n()).done){l.next=15;break}return l.delegateYield(i(),"t0",10);case 10:if(!(u=l.t0)){l.next=13;break}return l.abrupt("return",u.v);case 13:l.next=8;break;case 15:l.next=20;break;case 17:l.prev=17,l.t1=l.catch(5),c.e(l.t1);case 20:return l.prev=20,c.f(),l.finish(20);case 23:return l.abrupt("return",!1);case 24:return l.prev=24,o.close(),l.finish(24);case 27:case"end":return l.stop()}},e,null,[[3,,24,27],[5,17,20,23]])}))).apply(this,arguments)}function m(e,t,n){return y.apply(this,arguments)}function y(){return(y=_asyncToGenerator(_regeneratorRuntime().mark(function e(t,n,r){var o,s;return _regeneratorRuntime().wrap(function e(u){for(;;)switch(u.prev=u.next){case 0:o=path.join(t,n),u.t0=n,u.next=u.t0==="".concat(r,".route.ts")?4:u.t0==="".concat(r,".controller.ts")?6:u.t0==="".concat(r,".validation.ts")?8:u.t0==="".concat(r,".service.ts")?10:12;break;case 4:return s=a,u.abrupt("break",12);case 6:return s=c,u.abrupt("break",12);case 8:return s=i,u.abrupt("break",12);case 10:return s=l,u.abrupt("break",12);case 12:var d;fs.writeFileSync(o,s.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat((d=o,path.relative(path.join(__dirname,".."),d))," ").concat(BLUE,"(").concat(Buffer.byteLength(s,"utf8")," bytes)").concat(RESET));case 14:case"end":return u.stop()}},e)}))).apply(this,arguments)}function v(e,t,n){return g.apply(this,arguments)}function g(){return(g=_asyncToGenerator(_regeneratorRuntime().mark(function e(t,n,r){var a,o,c;return _regeneratorRuntime().wrap(function e(s){for(;;)switch(s.prev=s.next){case 0:a=_createForOfIteratorHelper(n),s.prev=1,a.s();case 3:if((o=a.n()).done){s.next=9;break}return c=o.value,s.next=7,m(t,c,r);case 7:s.next=3;break;case 9:s.next=14;break;case 11:s.prev=11,s.t0=s.catch(1),a.e(s.t0);case 14:return s.prev=14,a.f(),s.finish(14);case 17:case"end":return s.stop()}},e,null,[[1,11,14,17]])}))).apply(this,arguments)}path.join(u,"".concat(args[0],".service.ts")),[r,o].forEach(function(e){fs.existsSync(e)||fs.mkdirSync(e,{recursive:!0})}),_asyncToGenerator(_regeneratorRuntime().mark(function e(){var t,n,r;return _regeneratorRuntime().wrap(function e(a){for(;;)switch(a.prev=a.next){case 0:if(t=args[0],n=path.join(process.cwd(),"src","modules"),t){a.next=5;break}return console.log("".concat(RED,"Please provide a module name.").concat(RESET)),a.abrupt("return");case 5:return a.next=7,f(n,t);case 7:(r=a.sent)||console.log("".concat(RED,"Module ").concat(t," not found.").concat(RESET));case 9:case"end":return a.stop()}},e)}))()}),program.parse(process.argv)):(console.error("Unknown command: ".concat(command)),process.exit(1));