#!/usr/bin/env node
function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _toArray(e){return _arrayWithHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableRest()}function _nonIterableRest(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=({}).toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,n):void 0}}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=Array(n);t<n;t++)a[t]=e[t];return a}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithHoles(e){if(Array.isArray(e))return e}var _process$argv=_toArray(process.argv),command=_process$argv[2],args=_process$argv.slice(3),fs=require("fs"),path=require("path"),_require=require("commander"),program=_require.program,GREEN="\x1b[32m",BLUE="\x1b[34m",RESET="\x1b[0m",specialCharRegex=/[0-9!@#$%^&*()_+{}\[\]:;"'<>,.?/~`|\-=\s]/g;function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function toCamelCase(e){return e.replace(/[^a-zA-Z]+/g,"-").replace(/^-+|-+$/g,"").split("-").map(function(e,n){return 0===n?e.toLowerCase():e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}).join("")}"resource"===command?(program.version("1.0.0").description("Generate route, model, controller, and interface files for a new resource").argument("<name>","Resource name").action(function(e){var n=specialCharRegex.test(args[0])?toCamelCase(args[0]):args[0].toLowerCase(),t=capitalize(n),a=path.join(__dirname,"..","src","modules",args[0]),c=path.join(__dirname,"..","src","modules",args[0]),r=path.join(__dirname,"..","src","modules",args[0]),o=path.join(__dirname,"..","src","modules",args[0]),s=function e(n){return path.relative(path.join(__dirname,".."),n)};[a,c].forEach(function(e){fs.existsSync(e)||fs.mkdirSync(e,{recursive:!0})});var i="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(t,",\n  createMany").concat(t,",\n  update").concat(t,",\n  updateMany").concat(t,",\n  delete").concat(t,",\n  deleteMany").concat(t,",\n  get").concat(t,"ById,\n  getMany").concat(t,"\n} from './").concat(args[0],".controller';\n\n//Import validation from corresponding module\nimport { validate").concat(t," } from './").concat(args[0],".validation';\nimport { validateId, validateIds } from '../../handlers/common-zod-validator';\n\n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"\n * @description Create a new ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['create").concat(t,"']\n * @param {function} validation - ['validate").concat(t,"']\n */\nrouter.post(\"/create-").concat(args[0],'", validate').concat(t,", create").concat(t,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"/many\n * @description Create multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['createMany").concat(t,"']\n */\nrouter.post(\"/create-").concat(args[0],'/many", createMany').concat(t,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/many\n * @description Update multiple ").concat(args[0]," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(t,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.put(\"/update-").concat(args[0],'/many", validateIds, updateMany').concat(t,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/:id\n * @description Update ").concat(args[0]," information\n * @param {string} id - The ID of the ").concat(args[0]," to update\n * @access Public\n * @param {function} controller - ['update").concat(t,"']\n * @param {function} validation - ['validateId', 'validate").concat(t,"']\n */\nrouter.put(\"/update-").concat(args[0],'/:id", validateId, validate').concat(t,", update").concat(t,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/many\n * @description Delete multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(t,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(args[0],'/many", validateIds, deleteMany').concat(t,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/:id\n * @description Delete a ").concat(args[0],"\n * @param {string} id - The ID of the ").concat(args[0]," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(t,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(args[0],'/:id", validateId, delete').concat(t,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/many\n * @description Get multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['getMany").concat(t,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.get(\"/get-").concat(args[0],'/many", validateIds, getMany').concat(t,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/:id\n * @description Get a ").concat(args[0]," by ID\n * @param {string} id - The ID of the ").concat(args[0]," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(t,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(args[0],'/:id", validateId, get').concat(t,"ById);\n\n// Export the router\nmodule.exports = router;\n    "),d=path.join(a,"".concat(args[0],".route.ts"));fs.writeFileSync(d,i.trim());var u="\nimport { Request, Response } from 'express';\nimport { ".concat(n,"Services } from './").concat(args[0],".service';\nimport ServerResponse from '../../helpers/responses/custom-response';\nimport catchAsync from '../../utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(t,".\n *\n * @param {Request} req - The request object containing ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(args[0]," and get the result\n  const result = await ").concat(n,"Services.create").concat(t,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(t," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(n,"s and get the result\n  const result = await ").concat(n,"Services.createMany").concat(t,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(n,"Services.update").concat(t,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(t," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(args[0]," and get the result\n  const result = await ").concat(n,"Services.updateMany").concat(t,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(args[0]," by ID\n  await ").concat(n,"Services.delete").concat(t,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(t," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(args[0]," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(args[0]," and get the result\n  await ").concat(n,"Services.deleteMany").concat(t,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(args[0]," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(t,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(n,"Services.get").concat(t,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(t," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(t," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(args[0]," based on query parameters and get the result\n  const result = await ").concat(n,"Services.getMany").concat(t,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    "),l=path.join(c,"".concat(args[0],".controller.ts"));fs.writeFileSync(l,u.trim());var p="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '../../handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ".concat(n," data.\n */\nconst zod").concat(t,"Schema = z.object({\n // Define schema fields here\n}).strict();\n\n/**\n * Middleware function to validate ").concat(n," using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate").concat(t," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request body\n  const { error, success } = zod").concat(t,"Schema.safeParse(req.body);\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n    "),m=path.join(r,"".concat(args[0],".validation.ts"));fs.writeFileSync(m,p.trim());var h="\nimport { Prisma } from '@prisma/client';\n\n// Import the Prisma Client instance\nimport { prismaClient } from '../../index';\n\n/**\n * Service function to create a new ".concat(n,".\n *\n * @param data - The data to create a new ").concat(n,".\n * @returns {Promise<").concat(t,">} - The created ").concat(n,".\n */\nconst create").concat(t," = async (data: Prisma.").concat(t,"CreateInput) => {\n  return await prismaClient.").concat(n,".create({ data });\n};\n\n/**\n * Service function to create multiple ").concat(n,".\n *\n * @param data - An array of data to create multiple ").concat(n,".\n * @returns {Promise<").concat(t,"[]>} - The created ").concat(n,".\n */\nconst createMany").concat(t," = async (data: Prisma.").concat(t,"CreateManyInput[]) => {\n  return await prismaClient.").concat(n,".createMany({ data });\n};\n\n/**\n * Service function to update a single ").concat(n," by ID.\n *\n * @param id - The ID of the ").concat(n," to update.\n * @param data - The updated data for the ").concat(n,".\n * @returns {Promise<").concat(t,">} - The updated ").concat(n,".\n */\nconst update").concat(t," = async (id: string, data: Prisma.").concat(t,"UpdateInput) => {\n  return await prismaClient.").concat(n,".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple ").concat(n,".\n *\n * @param data - An array of data to update multiple ").concat(n,".\n * @returns {Promise<").concat(t,"[]>} - The updated ").concat(n,".\n */\nconst updateMany").concat(t," = async (data: { id: string; updates: Prisma.").concat(t,"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient.").concat(n,".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(n," by ID.\n *\n * @param id - The ID of the ").concat(n," to delete.\n * @returns {Promise<").concat(t,">} - The deleted ").concat(n,".\n */\nconst delete").concat(t," = async (id: string) => {\n  return await prismaClient.").concat(n,".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple ").concat(n,".\n *\n * @param ids - An array of IDs of ").concat(n," to delete.\n * @returns {Promise<").concat(t,"[]>} - The deleted ").concat(n,".\n */\nconst deleteMany").concat(t," = async (ids: string[]) => {\n  return await prismaClient.").concat(n,".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single ").concat(n," by ID.\n *\n * @param id - The ID of the ").concat(n," to retrieve.\n * @returns {Promise<").concat(t,">} - The retrieved ").concat(n,".\n */\nconst get").concat(t,"ById = async (id: string) => {\n  return await prismaClient.").concat(n,".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple ").concat(n," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(n,".\n * @returns {Promise<").concat(t,"[]>} - The retrieved ").concat(n,".\n */\nconst getMany").concat(t," = async (query: Prisma.").concat(t,"WhereInput) => {\n  return await prismaClient.").concat(n,".findMany({\n    where: query,\n  });\n};\n\nexport const ").concat(n,"Services = {\n  create").concat(t,",\n  createMany").concat(t,",\n  update").concat(t,",\n  updateMany").concat(t,",\n  delete").concat(t,",\n  deleteMany").concat(t,",\n  get").concat(t,"ById,\n  getMany").concat(t,",\n};\n    "),y=path.join(o,"".concat(args[0],".service.ts"));fs.writeFileSync(y,h.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(s(l)," ").concat(BLUE,"(").concat(Buffer.byteLength(u,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(s(d)," ").concat(BLUE,"(").concat(Buffer.byteLength(i,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(s(y)," ").concat(BLUE,"(").concat(Buffer.byteLength(h,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(s(m)," ").concat(BLUE,"(").concat(Buffer.byteLength(p,"utf8")," bytes)"))}),program.parse(process.argv)):"nested-resource"===command?(program.version("1.0.0").description("Generate nested route, model, controller, and interface files for a new resource").argument("<path>","Nested path to resource (e.g., folder1/folder2/resourceName)").action(function(e){var n=args[0].split("/"),t=n.pop(),a=specialCharRegex.test(args[0])?toCamelCase(t):t.toLowerCase(),c=n,r=capitalize(a),o=path.join(__dirname,"..","src"),s=path.join.apply(path,[o,"modules"].concat(_toConsumableArray(c),[t])),i=function e(n){return path.relative(path.join(__dirname,".."),n)};fs.existsSync(s)||fs.mkdirSync(s,{recursive:!0});var d="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(r,",\n  createMany").concat(r,",\n  update").concat(r,",\n  updateMany").concat(r,",\n  delete").concat(r,",\n  deleteMany").concat(r,",\n  get").concat(r,"ById,\n  getMany").concat(r,"\n} from './").concat(t,".controller';\n\n//Import validation from corresponding module\nimport { validate").concat(r," } from './").concat(t,".validation';\nimport { validateId, validateIds } from '").concat(Array(c.length+1).fill("..").join("/"),"/handlers/common-zod-validator';\n      \n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(c.join("/"),"/").concat(t,"/create-").concat(t,"\n * @description Create a new ").concat(t,"\n * @access Public\n * @param {function} controller - ['create").concat(r,"']\n * @param {function} validation - ['validate").concat(r,"']\n */\nrouter.post(\"/create-").concat(t,'", validate').concat(r,", create").concat(r,");\n\n/**\n * @route POST /api/v1/").concat(c.join("/"),"/").concat(t,"/create-").concat(t,"/many\n * @description Create multiple ").concat(t,"\n * @access Public\n * @param {function} controller - ['createMany").concat(r,"']\n */\nrouter.post(\"/create-").concat(t,'/many", createMany').concat(r,");\n\n/**\n * @route PUT /api/v1/").concat(c.join("/"),"/").concat(t,"/update-").concat(t,"/many\n * @description Update multiple ").concat(t," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.put(\"/update-").concat(t,'/many", validateIds, updateMany').concat(r,");\n\n/**\n * @route PUT /api/v1/").concat(c.join("/"),"/").concat(t,"/update-").concat(t,"/:id\n * @description Update ").concat(t," information\n * @param {string} id - The ID of the ").concat(t," to update\n * @access Public\n * @param {function} controller - ['update").concat(r,"']\n * @param {function} validation - ['validateId', 'validate").concat(r,"']\n */\nrouter.put(\"/update-").concat(t,'/:id", validateId, validate').concat(r,", update").concat(r,");\n\n/**\n * @route DELETE /api/v1/").concat(c.join("/"),"/").concat(t,"/delete-").concat(t,"/many\n * @description Delete multiple ").concat(t,"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(t,'/many", validateIds, deleteMany').concat(r,");\n\n/**\n * @route DELETE /api/v1/").concat(c.join("/"),"/").concat(t,"/delete-").concat(t,"/:id\n * @description Delete a ").concat(t,"\n * @param {string} id - The ID of the ").concat(t," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(r,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(t,'/:id", validateId, delete').concat(r,");\n\n/**\n * @route GET /api/v1/").concat(c.join("/"),"/").concat(t,"/get-").concat(t,"/many\n * @description Get multiple ").concat(t,"\n * @access Public\n * @param {function} controller - ['getMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.get(\"/get-").concat(t,'/many", validateIds, getMany').concat(r,");\n\n/**\n * @route GET /api/v1/").concat(c.join("/"),"/").concat(t,"/get-").concat(t,"/:id\n * @description Get a ").concat(t," by ID\n * @param {string} id - The ID of the ").concat(t," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(r,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(t,'/:id", validateId, get').concat(r,"ById);\n\n// Export the router\nmodule.exports = router;\n    "),u=path.join(s,"".concat(t,".route.ts"));fs.writeFileSync(u,d.trim());var l="\nimport { Request, Response } from 'express';\nimport { ".concat(a,"Services } from './").concat(t,".service';\nimport ServerResponse from '").concat(Array(c.length+1).fill("..").join("/"),"/helpers/responses/custom-response';\nimport catchAsync from '").concat(Array(c.length+1).fill("..").join("/"),"/utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(r,".\n *\n * @param {Request} req - The request object containing ").concat(t," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(t," and get the result\n  const result = await ").concat(a,"Services.create").concat(r,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(r," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(t,".\n *\n * @param {Request} req - The request object containing an array of ").concat(t," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(t," and get the result\n  const result = await ").concat(a,"Services.createMany").concat(r,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(r,".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(t," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(t," by ID and get the result\n  const result = await ").concat(a,"Services.update").concat(r,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(r," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(t,".\n *\n * @param {Request} req - The request object containing an array of ").concat(t," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(t," and get the result\n  const result = await ").concat(a,"Services.updateMany").concat(r,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(r,".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(t," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(t," by ID\n  await ").concat(a,"Services.delete").concat(r,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(r," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(t,".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(t," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(t," and get the result\n  await ").concat(a,"Services.deleteMany").concat(r,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(r," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(t," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(r,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(t," by ID and get the result\n  const result = await ").concat(a,"Services.get").concat(r,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(r," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(t,".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(t," based on query parameters and get the result\n  const result = await ").concat(a,"Services.getMany").concat(r,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    "),p=path.join(s,"".concat(t,".controller.ts"));fs.writeFileSync(p,l.trim());var m="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '".concat(Array(c.length+1).fill("..").join("/"),"/handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ").concat(t," data.\n */\nconst zod").concat(r,"Schema = z.object({\n  // Define schema fields here\n}).strict();\n\n/**\n * Middleware function to validate ").concat(t," using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate").concat(r," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request body\n  const { error, success } = zod").concat(r,"Schema.safeParse(req.body);\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n\n"),h=path.join(s,"".concat(t,".validation.ts"));fs.writeFileSync(h,m.trim());var y="\nimport { Prisma } from '@prisma/client';\n\n// Import the prisma client\nimport { prismaClient } from '".concat(Array(c.length+1).fill("..").join("/"),"/index';\n\n/**\n * Service function to create a new ").concat(t,".\n *\n * @param data - The data to create a new ").concat(t,".\n * @returns {Promise<").concat(r,">} - The created ").concat(t,".\n */\nconst create").concat(r," = async (data: Prisma.").concat(r,"CreateInput) => {\n  return await prismaClient.").concat(t,".create({ data });\n};\n\n/**\n * Service function to create multiple ").concat(t,".\n *\n * @param data - An array of data to create multiple ").concat(t,".\n * @returns {Promise<").concat(r,"[]>} - The created ").concat(t,".\n */\nconst createMany").concat(r," = async (data: Prisma.").concat(r,"CreateManyInput[]) => {\n  return await prismaClient.").concat(t,".createMany({ data });\n};\n\n/**\n * Service function to update a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to update.\n * @param data - The updated data for the ").concat(t,".\n * @returns {Promise<").concat(r,">} - The updated ").concat(t,".\n */\nconst update").concat(r," = async (id: string, data: Prisma.").concat(r,"UpdateInput) => {\n  return await prismaClient.").concat(t,".update({\n    where: { id },\n    data,\n  });\n};\n\n/**\n * Service function to update multiple ").concat(t,".\n *\n * @param data - An array of data to update multiple ").concat(t,".\n * @returns {Promise<").concat(r,"[]>} - The updated ").concat(t,".\n */\nconst updateMany").concat(r," = async (data: { id: string; updates: Prisma.").concat(r,"UpdateInput}[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    prismaClient.").concat(t,".update({\n      where: { id },\n      data: updates,\n    })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to delete.\n * @returns {Promise<").concat(r,">} - The deleted ").concat(t,".\n */\nconst delete").concat(r," = async (id: string) => {\n  return await prismaClient.").concat(t,".delete({\n    where: { id },\n  });\n};\n\n/**\n * Service function to delete multiple ").concat(t,".\n *\n * @param ids - An array of IDs of ").concat(t," to delete.\n * @returns {Promise<").concat(r,"[]>} - The deleted ").concat(t,".\n */\nconst deleteMany").concat(r," = async (ids: string[]) => {\n  return await prismaClient.").concat(t,".deleteMany({\n    where: {\n      id: { in: ids },\n    },\n  });\n};\n\n/**\n * Service function to retrieve a single ").concat(t," by ID.\n *\n * @param id - The ID of the ").concat(t," to retrieve.\n * @returns {Promise<").concat(r,">} - The retrieved ").concat(t,".\n */\nconst get").concat(r,"ById = async (id: string) => {\n  return await prismaClient.").concat(t,".findUnique({\n    where: { id },\n  });\n};\n\n/**\n * Service function to retrieve multiple ").concat(t," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(t,".\n * @returns {Promise<").concat(r,"[]>} - The retrieved ").concat(t,".\n */\nconst getMany").concat(r," = async (query: Prisma.").concat(r,"WhereInput) => {\n  return await prismaClient.").concat(t,".findMany({\n    where: query,\n  });\n};\n\nexport const ").concat(t,"Services = {\n  create").concat(r,",\n  createMany").concat(r,",\n  update").concat(r,",\n  updateMany").concat(r,",\n  delete").concat(r,",\n  deleteMany").concat(r,",\n  get").concat(r,"ById,\n  getMany").concat(r,",\n};\n    "),f=path.join(s,"".concat(t,".service.ts"));fs.writeFileSync(f,y.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(i(p)," ").concat(BLUE,"(").concat(Buffer.byteLength(l,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(i(u)," ").concat(BLUE,"(").concat(Buffer.byteLength(d,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(i(f)," ").concat(BLUE,"(").concat(Buffer.byteLength(y,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(i(h)," ").concat(BLUE,"(").concat(Buffer.byteLength(m,"utf8")," bytes)"))}),program.parse(process.argv)):(console.error("Unknown command: ".concat(command)),process.exit(1));